// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  Admin
  Editor
  Viewer
}

model User {
  id          String    @id @default(cuid()) @db.VarChar(32)
  avatarUrl   String?   @map("avatar_url") @db.VarChar(255)
  discordId   String    @unique @map("discord_id") @db.VarChar(255)
  email       String?   @unique @db.VarChar(255)
  name        String?   @db.VarChar(255)
  role        UserRole  @default(Viewer)
  createdAt   DateTime  @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  setting Setting? @relation("UserSetting")

  @@map("users")
}

model Unit {
  id         String      @id @default(cuid()) @db.VarChar(32)
  bgColor    String      @map("bg_color") @db.VarChar(10)
  code       String      @unique @db.VarChar(20)
  color      String      @db.VarChar(10)
  name       String      @db.VarChar(20)
  priority   Int         @default(0)
  short      String      @db.VarChar(10)
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  characters Character[]

  @@map("units")
}

model Character {
  id        String   @id @default(cuid()) @db.VarChar(32)
  avatarUrl String?  @map("avatar_url") @db.VarChar(255)
  bgColor   String   @map("bg_color") @db.VarChar(10)
  code      String   @unique @db.VarChar(20)
  color     String   @db.VarChar(10)
  name      String   @db.VarChar(20)
  priority  Int      @default(0)
  short     String   @db.VarChar(10)
  unitId    String?  @map("unit_id") @db.VarChar(32)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  unit      Unit?    @relation(fields: [unitId], references: [id], onDelete: Cascade)

  @@map("characters")
}

model Setting {
  id             String   @id @default(cuid()) @db.VarChar(32)
  leaderSheetUrl String?  @map("leader_sheet_url") @db.VarChar(255)
  userId         String   @unique @map("user_id") @db.VarChar(32)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user User @relation("UserSetting", fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}
